c(lin = "green", sqr = "red", const = "blue")[name]

x <- findInterval(data$date, breaks_waves)
    x <- ifelse(x %in% c(1, 3, 5, 7, 9), x, 0)
    inds <- lapply(setdiff(unique(x), 0), \(u) x == u)
    l <- length(inds)
    
    if (grepl("1", include)) {
      exogen$waves <- x %>%
        fastDummies::dummy_cols(remove_selected_columns = TRUE) %>%
        set_names(paste0("wave", 0:(l - 1))) %>%
        select(-wave0)
    } else if (grepl("2", include)) {
      mat <- matrix(0, length(x), l*2)
      for (i in seq_along(inds)) {
        mat[inds[[i]], i] <- 1:sum(inds[[i]])
        mat[inds[[i]], i + 1] <- mat[inds[[i]], i]^2
      }
      exogen$waves <- mat %>%
        as.data.frame() %>%
        set_names(paste0("wave", rep(1:l, each = 2), rep(c("",".sqr"), l)))
    }
  }


#cf_mods$cf2a4$varresult[[name("vaccines")]]$coefficients <-
#  cf_mods$cf2a4$varresult[[name("vaccines")]]$coefficients %>%
#  length() %>%
#  numeric()
#cf_mods$cf2a4$datamat <- cf_mods$cf2a4$datamat %>% mutate(across(matches("vaccines"), ~ 0))

a = custom_svars_fun(cf, x = mod_svar$af_vac, series = 3)
plot(a)
sum(a$counter[,2] - data$deaths_l[(n_vac + mod_svar$af_vac$p):n])

map(cf_preds, ~ nrow(.x$fcst[[1]]))

### custom
custom_svars_irf <- function(x, ..., n.ahead = 20) {
  if (!(is(x, "svars"))) {
    stop("\nPlease provide an object of class 'svars'.\n")
  }
  if (x$type == "const") {
    A_hat <- x$A_hat[, -1]
  }
  else if (x$type == "trend") {
    A_hat <- x$A_hat[, -1]
  }
  else if (x$type == "both") {
    A_hat <- x$A_hat[, -c(1, 2)]
  }
  else {
    A_hat <- x$A_hat
  }
  A_hat <- A_hat[, (ncol(A_hat) - x$K*x$p + 1):(ncol(A_hat))] #remove exogens
  B_hat <- x$B
  IR <- array(unlist(svars:::IRF(A_hat, B_hat, n.ahead)), c(x$K, x$K, 
                                                    n.ahead))
  impulse <- matrix(0, ncol = dim(IR)[2]^2 + 1, nrow = dim(IR)[3])
  colnames(impulse) <- rep("V1", ncol(impulse))
  cc <- 1
  impulse[, 1] <- seq(0, dim(IR)[3] - 1)
  for (i in 1:dim(IR)[2]) {
    for (j in 1:dim(IR)[2]) {
      cc <- cc + 1
      impulse[, cc] <- IR[i, j, ]
      colnames(impulse)[cc] <- paste("epsilon[", colnames(x$y)[j], 
                                     "]", "%->%", colnames(x$y)[i])
    }
  }
  impulse <- list(irf = as.data.frame(impulse))
  class(impulse) <- "svarirf"
  return(impulse)
}


custom_svars_fevd <- function (x, n.ahead = 10, ...) {
  if (!(is(x, "svars"))) {
    stop("\nPlease provide an object of class 'svars'.\n")
  }
  if (x$type == "const") {
    A_hat <- x$A_hat[, -1]
  }
  else if (x$type == "trend") {
    A_hat <- x$A_hat[, -1]
  }
  else if (x$type == "both") {
    A_hat <- x$A_hat[, -c(1, 2)]
  }
  else {
    A_hat <- x$A_hat
  }
  A_hat <- A_hat[, (ncol(A_hat) - x$K*x$p + 1):(ncol(A_hat))] #remove exogens
  B_hat <- x$B
  IR <- array(unlist(svars:::IRF(A_hat, B_hat, n.ahead)), c(x$K, x$K, 
                                                    n.ahead))
  fe <- list()
  for (i in 1:nrow(B_hat)) {
    fe[[i]] <- as.data.frame(t(IR[i, , ]))
    colnames(fe[[i]]) <- colnames(x$y)
  }
  names(fe) <- colnames(x$y)
  fe2 <- fe
  for (i in 1:length(fe)) {
    for (j in 1:n.ahead) {
      fe2[[i]][j, ] <- (colSums(fe[[i]][j:1, ]^2)/sum(fe[[i]][j:1, 
      ]^2)) * 100
    }
  }
  class(fe2) <- "svarfevd"
  return(fe2)
}



### matrix B
summary(modav_var)$corres %>% stargazer(summary = FALSE, rownames = FALSE, type = "text")
modav_svar$B %>% `colnames<-`(rownames(.)) %>% stargazer(summary = FALSE, rownames = FALSE, type = "text")

### model with ts data:
data_ts <- ts(data, frequency = 53, start = 8)

mod_var <- list(
  modbn  = VAR(data_ts[1:(start_vac - 1),-c(1,3)], p = p, type = "both", season = 4,
               exogen = create_exogen(data[1:(start_vac - 1),], include, week)),
  modan  = VAR(data_ts[start_vac:n,-c(1,3)], p = p, type = "both", season = 4,
               exogen = create_exogen(data[start_vac:n,], include, week)),
  modav  = VAR(data_ts[start_vac:n,-c(1)], p = p, type = "both", season = 4,
               exogen = create_exogen(data[start_vac:n,], include, week)),
  modanp  = VAR(data_ts[(start_vac + gap_size):n,-c(1,3)], p = p, type = "both", season = 4,
               exogen = create_exogen(data[(start_vac + gap_size):n,], include, week)),
  modavp  = VAR(data_ts[(start_vac + gap_size):n,-c(1)], p = p, type = "both", season = 4,
               exogen = create_exogen(data[(start_vac + gap_size):n,], include, week))
)


###
data_detrend <- map2_df(
  select(data, -date),
  decompose(select(data, -date) %>% as_ts())$trend %>% as.data.frame(),
  ~ .x - .y
) %>%
  mutate(date = data$date, .before = 1)

breaks_seasons <- rep(format(data$date, "%m") %in% c("11", "12", "01", "02", "03"), 3)

ggseasons <- geom_rect(
  aes(xmin = index, xmax = lead(index), ymin = 0, ymax = Inf, fill = breaks_seasons, serie = rep(vars_names, each = n)),
  alpha = 0.2
)


# SVAR results (before)
svar scoring forcing 100 iters:
          cases_s  deaths_s
cases_s   0.01607 0.000e+00
deaths_s -0.30290 1.079e-07

svar scoring 78 iters:
          cases_s  deaths_s
cases_s   0.01824 0.000e+00
deaths_s -0.30290 1.248e-07

svar direct:
            cases_s deaths_s
cases_s   3.076e-05   0.0000
deaths_s -2.852e-03   0.1952
